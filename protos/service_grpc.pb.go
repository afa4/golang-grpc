// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protos/service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IsEvenServiceClient is the client API for IsEvenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IsEvenServiceClient interface {
	// Sends a greeting
	IsEven(ctx context.Context, in *IsEvenRequest, opts ...grpc.CallOption) (*IsEvenReply, error)
}

type isEvenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIsEvenServiceClient(cc grpc.ClientConnInterface) IsEvenServiceClient {
	return &isEvenServiceClient{cc}
}

func (c *isEvenServiceClient) IsEven(ctx context.Context, in *IsEvenRequest, opts ...grpc.CallOption) (*IsEvenReply, error) {
	out := new(IsEvenReply)
	err := c.cc.Invoke(ctx, "/helloworld.IsEvenService/IsEven", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsEvenServiceServer is the server API for IsEvenService service.
// All implementations must embed UnimplementedIsEvenServiceServer
// for forward compatibility
type IsEvenServiceServer interface {
	// Sends a greeting
	IsEven(context.Context, *IsEvenRequest) (*IsEvenReply, error)
	mustEmbedUnimplementedIsEvenServiceServer()
}

// UnimplementedIsEvenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIsEvenServiceServer struct {
}

func (UnimplementedIsEvenServiceServer) IsEven(context.Context, *IsEvenRequest) (*IsEvenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEven not implemented")
}
func (UnimplementedIsEvenServiceServer) mustEmbedUnimplementedIsEvenServiceServer() {}

// UnsafeIsEvenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IsEvenServiceServer will
// result in compilation errors.
type UnsafeIsEvenServiceServer interface {
	mustEmbedUnimplementedIsEvenServiceServer()
}

func RegisterIsEvenServiceServer(s grpc.ServiceRegistrar, srv IsEvenServiceServer) {
	s.RegisterService(&IsEvenService_ServiceDesc, srv)
}

func _IsEvenService_IsEven_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEvenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsEvenServiceServer).IsEven(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.IsEvenService/IsEven",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsEvenServiceServer).IsEven(ctx, req.(*IsEvenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IsEvenService_ServiceDesc is the grpc.ServiceDesc for IsEvenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IsEvenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.IsEvenService",
	HandlerType: (*IsEvenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsEven",
			Handler:    _IsEvenService_IsEven_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
